// Generated by Dagger (https://dagger.dev).
package module.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import module.domain.repository.RepositoryApi;
import module.domain.usecases.RebootProgressDateBase;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseModule_ProvideRebootProgressDateBaseFactory implements Factory<RebootProgressDateBase> {
  private final Provider<RepositoryApi> repositoryApiProvider;

  public UseCaseModule_ProvideRebootProgressDateBaseFactory(
      Provider<RepositoryApi> repositoryApiProvider) {
    this.repositoryApiProvider = repositoryApiProvider;
  }

  @Override
  public RebootProgressDateBase get() {
    return provideRebootProgressDateBase(repositoryApiProvider.get());
  }

  public static UseCaseModule_ProvideRebootProgressDateBaseFactory create(
      Provider<RepositoryApi> repositoryApiProvider) {
    return new UseCaseModule_ProvideRebootProgressDateBaseFactory(repositoryApiProvider);
  }

  public static RebootProgressDateBase provideRebootProgressDateBase(RepositoryApi repositoryApi) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideRebootProgressDateBase(repositoryApi));
  }
}
