// Generated by Dagger (https://dagger.dev).
package module.di;

import com.project.remoteconfig.FireBaseConfig;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataSourceModule_ProvideFireBaseConfigFactory implements Factory<FireBaseConfig> {
  @Override
  public FireBaseConfig get() {
    return provideFireBaseConfig();
  }

  public static DataSourceModule_ProvideFireBaseConfigFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static FireBaseConfig provideFireBaseConfig() {
    return Preconditions.checkNotNullFromProvides(DataSourceModule.INSTANCE.provideFireBaseConfig());
  }

  private static final class InstanceHolder {
    private static final DataSourceModule_ProvideFireBaseConfigFactory INSTANCE = new DataSourceModule_ProvideFireBaseConfigFactory();
  }
}
